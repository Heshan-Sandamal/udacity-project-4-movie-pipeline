name: cd-backend-workflow

on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

  # Automatic trigger on push events to the main branch
  push:
    branches:
      - main
    paths:
      - 'backend/**'

env:
  # Setting an environment variable with the value of a configuration variable
  BACKEND_ECR_URL: ${{ vars.BACKEND_ECR_URL }}

#Use a matrix strategy to use Node.js versions 16.x and 18.x
jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install the dependencies.
      - run: |
          cd backend && python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      # Run the linter.
      - run: cd backend && pipenv run lint .

      # Send a console message at completion.
      - run: |
          echo "Lint Stage Completed"

  test:
    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install the dependencies.
      - run: |
          cd backend && python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev

      # Run the linter.
      - run: cd backend && pipenv run test

      - run: |
          echo "Test Stage Completed"

  build:
    needs: [ lint,test ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend && docker build -t $BACKEND_ECR_URL:$IMAGE_TAG .
          docker push $BACKEND_ECR_URL:$IMAGE_TAG
  

  deploy:
    needs: [ lint,test, build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      # Update kube config
      - run: aws eks update-kubeconfig --name cluster

      - name: Deploy Backend
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend/k8s && kustomize edit set image backend=$BACKEND_ECR_URL:$IMAGE_TAG
          kustomize build | kubectl apply -f -